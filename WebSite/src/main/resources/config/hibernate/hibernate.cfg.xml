<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://hibernate.org/dtd/hibernate-configuration-3.0.dtd">
        
<hibernate-configuration>

    <session-factory>
    	<!-- Database connection settings -->
        <property name="connection.driver_class">oracle.jdbc.driver.OracleDriver</property>  
        <property name="connection.url">jdbc:oracle:thin:@127.0.0.1:1521:XE</property>  
        <property name="connection.username">scott</property>  
        <property name="connection.password">tiger</property>  
        <property name="dialect">org.hibernate.dialect.Oracle10gDialect</property>  


		<!-- JDBC connection pool (use the built-in) -->
        <property name="hibernate.connection.pool_size">1</property> 
        
        <!-- Enable Hibernate's current session context -->
        <property name="hibernate.current_session_context_class">thread</property>
        
        <!-- Disable the second=level cache -->
        <property name="cache.provider_class">org.hibernate.cache.NoCacheProvider</property>
        
        <!-- Echo all executed SQL to stdout -->
        <property name="hibernate.show_sql">true</property>
        <property name="hibernate.format_sql">true</property>
        
		<property name="hbm2ddl.auto">update</property>		
		<!-- validate, update, create, create-drop 
		
		create
			- Session factory가 실행될 때에 스키마를 지우고 다시 생성합니다. 스키마를 생성한 다음에 classpath에서 import.sql 파일이 있는지 찾아 이 파일에 등록된 쿼리문을 실행합니다.

		create-drop
			- create와 같지만 session factory가 내려갈 때 DB의 스키마를 삭제합니다.

		update
			- 시작하면서 도메인 객체 구성과 DB의 스키마를 비교해 필요한 테이블이나 칼럼이 없을 때 도메인 객체에 맞춰 DB 스키마를 변경합니다. 데이터나 스키마를 지우지는 않습니다.

		validate
			- 처음에 도메인 객체 구성과 DB 스키마가 같은지 확인만 할 뿐 DB 스키마에 전혀 손대지 않습니다. SessionFactory 시작 시 확인을 해서 문제가 있으면 예외를 토해내고 죽습니다.
		-->

        <mapping class="com.domain.vo.Member"/>
        
        
    </session-factory>
    
</hibernate-configuration>